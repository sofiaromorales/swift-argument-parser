{
  "abstract" : [
    {
      "text" : "Support your users (and yourself) by providing rich help for arguments, options, and flags.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CustomizingHelp"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "ArgumentParser"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Customizing Help"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can provide help text when declaring any ",
              "type" : "text"
            },
            {
              "code" : "@Argument",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "@Option",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "@Flag",
              "type" : "codeVoice"
            },
            {
              "text" : " by passing a string literal as the ",
              "type" : "text"
            },
            {
              "code" : "help",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Example: ParsableCommand {",
            "    @Flag(help: \"Display extra information while processing.\")",
            "    var verbose = false",
            "",
            "    @Option(help: \"The number of extra lines to show.\")",
            "    var extraLines = 0",
            "",
            "    @Argument(help: \"The input file.\")",
            "    var inputFile: String?",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Users see these strings in the automatically-generated help screen, which is triggered by the ",
              "type" : "text"
            },
            {
              "code" : "-h",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "--help",
              "type" : "codeVoice"
            },
            {
              "text" : " flags, by default:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% example --help",
            "USAGE: example [--verbose] [--extra-lines <extra-lines>] <input-file>",
            "",
            "ARGUMENTS:",
            "  <input-file>            The input file.",
            "",
            "OPTIONS:",
            "  --verbose               Display extra information while processing.",
            "  --extra-lines <extra-lines>",
            "                          The number of extra lines to show. (default: 0)",
            "  -h, --help              Show help information."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Customizing-Help-for-Arguments",
          "level" : 2,
          "text" : "Customizing Help for Arguments",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more control over the help text, pass an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " instance instead of a string literal. The ",
              "type" : "text"
            },
            {
              "code" : "ArgumentHelp",
              "type" : "codeVoice"
            },
            {
              "text" : " type can include an abstract (which is what the string literal becomes), a discussion, a value name to use in the usage string, and a visibility level for that argument.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s the same command with some extra customization:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Example: ParsableCommand {",
            "    @Flag(help: \"Display extra information while processing.\")",
            "    var verbose = false",
            "",
            "    @Option(help: ArgumentHelp(",
            "        \"The number of extra lines to show.\",",
            "        valueName: \"n\"))",
            "    var extraLines = 0",
            "",
            "    @Argument(help: ArgumentHelp(",
            "        \"The input file.\",",
            "        discussion: \"If no input file is provided, the tool reads from stdin.\",",
            "        valueName: \"file\"))",
            "    var inputFile: String?",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "…and the help screen:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "USAGE: example [--verbose] [--extra-lines <n>] [<file>]",
            "",
            "ARGUMENTS:",
            "  <file>                  The input file.",
            "        If no input file is provided, the tool reads from stdin.",
            "",
            "OPTIONS:",
            "  --verbose               Display extra information while processing.",
            "  --extra-lines <n>       The number of extra lines to show. (default: 0)",
            "  -h, --help              Show help information."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Controlling-Argument-Visibility",
          "level" : 3,
          "text" : "Controlling Argument Visibility",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can specify the visibility of any argument, option, or flag.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Example: ParsableCommand {",
            "    @Flag(help: ArgumentHelp(\"Show extra info.\", visibility: .hidden))",
            "    var verbose: Bool = false",
            "",
            "    @Flag(help: ArgumentHelp(\"Use the legacy format.\", visibility: .private))",
            "    var useLegacyFormat: Bool = false",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "--verbose",
              "type" : "codeVoice"
            },
            {
              "text" : " flag is only visible in the extended help screen. The ",
              "type" : "text"
            },
            {
              "code" : "--use-legacy-format",
              "type" : "codeVoice"
            },
            {
              "text" : " stays hidden even in the extended help screen, due to its ",
              "type" : "text"
            },
            {
              "code" : ".private",
              "type" : "codeVoice"
            },
            {
              "text" : " visibility.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% example --help",
            "USAGE: example",
            "",
            "OPTIONS:",
            "  -h, --help              Show help information.",
            "",
            "% example --help-hidden",
            "USAGE: example [--verbose]",
            "",
            "OPTIONS:",
            "  --verbose               Show extra info.",
            "  -h, --help              Show help information."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternatively, you can group multiple arguments, options, and flags together as part of a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " type, and set the visibility when including them as an ",
              "type" : "text"
            },
            {
              "code" : "@OptionGroup",
              "type" : "codeVoice"
            },
            {
              "text" : " property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct ExperimentalFlags: ParsableArguments {",
            "    @Flag(help: \"Use the remote access token. (experimental)\")",
            "    var experimentalUseRemoteAccessToken: Bool = false",
            "",
            "    @Flag(help: \"Use advanced security. (experimental)\")",
            "    var experimentalAdvancedSecurity: Bool = false",
            "}",
            "",
            "struct Example: ParsableCommand {",
            "    @OptionGroup(visibility: .hidden)",
            "    var flags: ExperimentalFlags",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The members of ",
              "type" : "text"
            },
            {
              "code" : "ExperimentalFlags",
              "type" : "codeVoice"
            },
            {
              "text" : " are only shown in the extended help screen:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% example --help",
            "USAGE: example",
            "",
            "OPTIONS:",
            "  -h, --help              Show help information.",
            "",
            "% example --help-hidden",
            "USAGE: example [--experimental-use-remote-access-token] [--experimental-advanced-security]",
            "",
            "OPTIONS:",
            "  --experimental-use-remote-access-token",
            "                          Use the remote access token. (experimental)",
            "  --experimental-advanced-security",
            "                          Use advanced security. (experimental)",
            "  -h, --help              Show help information."
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentVisibility",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/NameSpecification"
      ],
      "title" : "Property Customization"
    }
  ]
, 
"references": {
"doc://org.swift.ArgumentParser/documentation/ArgumentParser": {
  "abstract" : [
    {
      "text" : "Straightforward, type-safe argument parsing for Swift.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentHelp": {
  "abstract" : [
    {
      "text" : "Help information for a command-line argument.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArgumentHelp"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArgumentHelp"
    }
  ],
  "role" : "symbol",
  "title" : "ArgumentHelp",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumenthelp"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentVisibility": {
  "abstract" : [
    {
      "text" : "Visibility level of an argument’s help.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArgumentVisibility"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentVisibility",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArgumentVisibility"
    }
  ],
  "role" : "symbol",
  "title" : "ArgumentVisibility",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumentvisibility"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/NameSpecification": {
  "abstract" : [
    {
      "text" : "A specification for how to represent a property as a command-line argument",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "label.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NameSpecification"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/NameSpecification",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NameSpecification"
    }
  ],
  "role" : "symbol",
  "title" : "NameSpecification",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/namespecification"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableArguments": {
  "abstract" : [
    {
      "text" : "A type that can be parsed from a program’s command-line arguments.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableArguments"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableArguments"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableArguments",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablearguments"
}
}
}