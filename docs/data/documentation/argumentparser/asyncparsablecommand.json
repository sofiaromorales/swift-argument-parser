{
  "abstract" : [
    {
      "text" : "A type that can be executed asynchronously, as part of a nested tree of",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "commands.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:14ArgumentParser20AsyncParsableCommandP",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "protocol"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "AsyncParsableCommand"
      }
    ],
    "modules" : [
      {
        "name" : "ArgumentParser"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "AsyncParsableCommand"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "Mac Catalyst",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "6.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Protocol",
    "symbolKind" : "protocol",
    "title" : "AsyncParsableCommand"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "protocol"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "AsyncParsableCommand"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:14ArgumentParser15ParsableCommandP",
              "text" : "ParsableCommand"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : "\/",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " code in your commands’ ",
              "type" : "text"
            },
            {
              "code" : "run()",
              "type" : "codeVoice"
            },
            {
              "text" : " method implementations, follow these steps:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "For the root command in your command-line tool, declare conformance to ",
                      "type" : "text"
                    },
                    {
                      "code" : "AsyncParsableCommand",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", whether or not that command uses asynchronous code.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Apply the ",
                      "type" : "text"
                    },
                    {
                      "code" : "@main",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " attribute to the root command. (Note: If your root command is in a ",
                      "type" : "text"
                    },
                    {
                      "code" : "main.swift",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " file, rename the file to the name of the command.)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "For any command that needs to use asynchronous code, declare conformance to ",
                      "type" : "text"
                    },
                    {
                      "code" : "AsyncParsableCommand",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " and mark the ",
                      "type" : "text"
                    },
                    {
                      "code" : "run()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " method as ",
                      "type" : "text"
                    },
                    {
                      "code" : "async",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ". No changes are needed for subcommands that don’t use asynchronous code.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example declares a ",
              "type" : "text"
            },
            {
              "code" : "CountLines",
              "type" : "codeVoice"
            },
            {
              "text" : " command that uses Foundation’s asynchronous ",
              "type" : "text"
            },
            {
              "code" : "FileHandle.AsyncBytes",
              "type" : "codeVoice"
            },
            {
              "text" : " to read the lines from a file:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import Foundation",
            "",
            "@main",
            "struct CountLines: AsyncParsableCommand {",
            "    @Argument(transform: URL.init(fileURLWithPath:))",
            "    var inputFile: URL",
            "",
            "    mutating func run() async throws {",
            "        let fileHandle = try FileHandle(forReadingFrom: inputFile)",
            "        let lineCount = try await fileHandle.bytes.lines.reduce(into: 0) ",
            "            { count, _ in count += 1 }",
            "        print(lineCount)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The Swift compiler uses either the type marked with ",
                  "type" : "text"
                },
                {
                  "code" : "@main",
                  "type" : "codeVoice"
                },
                {
                  "text" : " or a ",
                  "type" : "text"
                },
                {
                  "code" : "main.swift",
                  "type" : "codeVoice"
                },
                {
                  "text" : " file as the entry point for an executable program. You can use either one, but not both — rename your ",
                  "type" : "text"
                },
                {
                  "code" : "main.swift",
                  "type" : "codeVoice"
                },
                {
                  "text" : " file to the name of the command when you add ",
                  "type" : "text"
                },
                {
                  "code" : "@main",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Usage-in-Swift-55",
          "level" : 3,
          "text" : "Usage in Swift 5.5",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In Swift 5.5, you need to declare a separate, standalone type as your asynchronous ",
              "type" : "text"
            },
            {
              "code" : "@main",
              "type" : "codeVoice"
            },
            {
              "text" : " entry point. Instead of designating your root command as ",
              "type" : "text"
            },
            {
              "code" : "@main",
              "type" : "codeVoice"
            },
            {
              "text" : ", as described above, use the code snippet below, replacing the placeholder with the name of your own root command. Otherwise, follow the steps above to use ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : "\/",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " code within your commands’ ",
              "type" : "text"
            },
            {
              "code" : "run()",
              "type" : "codeVoice"
            },
            {
              "text" : " methods.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@main struct AsyncMain: AsyncMainProtocol {",
            "    typealias Command = <#RootCommand#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
        "doc:\/\/org.swift.ArgumentParser\/Se"
      ],
      "kind" : "relationships",
      "title" : "Inherits From",
      "type" : "inheritsFrom"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/GettingStarted",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CustomizingCommandHelp"
      ],
      "title" : "Essentials"
    }
  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand\/run()"
      ],
      "title" : "Implementing a Command’s Behavior"
    },
    {
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand\/main()",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncMainProtocol"
      ],
      "title" : "Starting the Program"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/argumentparser\/asyncparsablecommand"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.ArgumentParser/Se": {
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/Se",
  "title" : "Swift.Decodable",
  "type" : "unresolvable"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser": {
  "abstract" : [
    {
      "text" : "Straightforward, type-safe argument parsing for Swift.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/AsyncMainProtocol": {
  "abstract" : [
    {
      "text" : "A type that can designate an ",
      "type" : "text"
    },
    {
      "code" : "AsyncParsableCommand",
      "type" : "codeVoice"
    },
    {
      "text" : " as the program’s",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "entry point.",
      "type" : "text"
    }
  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncMainProtocol"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncMainProtocol",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncMainProtocol"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncMainProtocol",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/asyncmainprotocol"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/AsyncParsableCommand": {
  "abstract" : [
    {
      "text" : "A type that can be executed asynchronously, as part of a nested tree of",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "commands.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncParsableCommand"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/asyncparsablecommand"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/AsyncParsableCommand/main()": {
  "abstract" : [
    {
      "text" : "Executes this command, or one of its subcommands, with the program’s",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "command-line arguments.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "main"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand\/main()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "main()",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/asyncparsablecommand\/main()"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/AsyncParsableCommand/run()": {
  "abstract" : [
    {
      "text" : "The behavior or functionality of this command.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "run"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand\/run()",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "run()",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/asyncparsablecommand\/run()"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/CommandsAndSubcommands": {
  "abstract" : [
    {
      "text" : "Break complex command-line tools into a tree of subcommands.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands",
  "kind" : "article",
  "role" : "article",
  "title" : "Defining Commands and Subcommands",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/commandsandsubcommands"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/CustomizingCommandHelp": {
  "abstract" : [
    {
      "text" : "Define your command’s abstract, extended discussion, or usage string, and set the flags used to invoke the help display.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CustomizingCommandHelp",
  "kind" : "article",
  "role" : "article",
  "title" : "Customizing Help for Commands",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/customizingcommandhelp"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/GettingStarted": {
  "abstract" : [
    {
      "text" : "Learn to set up and customize a simple command-line tool.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/GettingStarted",
  "kind" : "article",
  "role" : "article",
  "title" : "Getting Started with ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/gettingstarted"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableArguments": {
  "abstract" : [
    {
      "text" : "A type that can be parsed from a program’s command-line arguments.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableArguments"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableArguments"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableArguments",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablearguments"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableCommand": {
  "abstract" : [
    {
      "text" : "A type that can be executed as part of a nested tree of commands.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand"
}
}
}