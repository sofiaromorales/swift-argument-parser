{
  "abstract" : [
    {
      "text" : "Parse all remaining inputs after parsing any known options or flags,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "including dash-prefixed inputs and the ",
      "type" : "text"
    },
    {
      "code" : "--",
      "type" : "codeVoice"
    },
    {
      "text" : " terminator.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/Argument",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:14ArgumentParser0A20ArrayParsingStrategyV21captureForPassthroughACvpZ",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "static"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "var"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "captureForPassthrough"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:14ArgumentParser0A20ArrayParsingStrategyV",
        "text" : "ArgumentArrayParsingStrategy"
      }
    ],
    "modules" : [
      {
        "name" : "ArgumentParser"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Type Property",
    "symbolKind" : "property",
    "title" : "captureForPassthrough"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "static"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "var"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "captureForPassthrough"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:14ArgumentParser0A20ArrayParsingStrategyV",
              "text" : "ArgumentArrayParsingStrategy"
            },
            {
              "kind" : "text",
              "text" : " { "
            },
            {
              "kind" : "keyword",
              "text" : "get"
            },
            {
              "kind" : "text",
              "text" : " }"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use the ",
              "type" : "text"
            },
            {
              "code" : "captureForPassthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " parsing strategy if you need to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "capture a userâ€™s input to manually pass it unchanged to another command.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you use this parsing strategy, the parser stops parsing flags and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "options as soon as it encounters a positional argument or an unrecognized",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "flag, and captures all remaining inputs in the array argument.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, the ",
              "type" : "text"
            },
            {
              "code" : "Example",
              "type" : "codeVoice"
            },
            {
              "text" : " command defined below has an ",
              "type" : "text"
            },
            {
              "code" : "words",
              "type" : "codeVoice"
            },
            {
              "text" : " array that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "uses the ",
              "type" : "text"
            },
            {
              "code" : "captureForPassthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " parsing strategy:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@main",
            "struct Example: ParsableCommand {",
            "    @Flag var verbose = false",
            "",
            "    @Argument(parsing: .captureForPassthrough)",
            "    var words: [String] = []",
            "",
            "    func run() {",
            "        print(words.joined(separator: \"\\n\"))",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Any values after the first unrecognized input are captured in the ",
              "type" : "text"
            },
            {
              "code" : "words",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "array.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ example --verbose one two --other",
            "one",
            "two",
            "--other",
            "$ example one two --verbose",
            "one",
            "two",
            "--verbose"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "With the ",
              "type" : "text"
            },
            {
              "code" : "captureForPassthrough",
              "type" : "codeVoice"
            },
            {
              "text" : " parsing strategy, the ",
              "type" : "text"
            },
            {
              "code" : "--",
              "type" : "codeVoice"
            },
            {
              "text" : " terminator",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is included in the captured values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ example --verbose one two -- --other",
            "one",
            "two",
            "--",
            "--other"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "This parsing strategy can be surprising for users, particularly",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "when combined with options and flags. Prefer ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " or",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " whenever possible, since users can always terminate",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "options and flags with the ",
                  "type" : "text"
                },
                {
                  "code" : "--",
                  "type" : "codeVoice"
                },
                {
                  "text" : " terminator. With the ",
                  "type" : "text"
                },
                {
                  "code" : "remaining",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "parsing strategy, the input ",
                  "type" : "text"
                },
                {
                  "code" : "--verbose -- one two --other",
                  "type" : "codeVoice"
                },
                {
                  "text" : " would have",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the same result as the first example above.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator"
      ],
      "title" : "Parsing Strategies"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://org.swift.ArgumentParser/documentation/ArgumentParser": {
  "abstract" : [
    {
      "text" : "Straightforward, type-safe argument parsing for Swift.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/Argument": {
  "abstract" : [
    {
      "text" : "A property wrapper that represents a positional command-line argument.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Argument"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/Argument",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Argument"
    }
  ],
  "role" : "symbol",
  "title" : "Argument",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argument"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy": {
  "abstract" : [
    {
      "text" : "The strategy to use when parsing multiple values from positional arguments",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "into an array.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "role" : "symbol",
  "title" : "ArgumentArrayParsingStrategy",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumentarrayparsingstrategy"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/allUnrecognized": {
  "abstract" : [
    {
      "text" : "After parsing, capture all unrecognized inputs in this argument array.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "allUnrecognized"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:14ArgumentParser0A20ArrayParsingStrategyV",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "allUnrecognized",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/captureForPassthrough": {
  "abstract" : [
    {
      "text" : "Parse all remaining inputs after parsing any known options or flags,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "including dash-prefixed inputs and the ",
      "type" : "text"
    },
    {
      "code" : "--",
      "type" : "codeVoice"
    },
    {
      "text" : " terminator.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "captureForPassthrough"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:14ArgumentParser0A20ArrayParsingStrategyV",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "captureForPassthrough",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator": {
  "abstract" : [
    {
      "text" : "Before parsing, capture all inputs that follow the ",
      "type" : "text"
    },
    {
      "code" : "--",
      "type" : "codeVoice"
    },
    {
      "text" : " terminator in this",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "argument array.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "postTerminator"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:14ArgumentParser0A20ArrayParsingStrategyV",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "postTerminator",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining": {
  "abstract" : [
    {
      "text" : "Parse only unprefixed values from the command-line input, ignoring",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "any inputs that have a dash prefix. This is the default strategy.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "remaining"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:14ArgumentParser0A20ArrayParsingStrategyV",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "remaining",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining"
}
}
}