{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditionalRemaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use the "},{"type":"codeVoice","code":"unconditionalRemaining"},{"type":"text","text":" parsing strategy, the parser"},{"type":"text","text":" "},{"type":"text","text":"stops parsing flags and options as soon as it encounters a positional"},{"type":"text","text":" "},{"type":"text","text":"argument or an unrecognized flag. For example, for a parsable type"},{"type":"text","text":" "},{"type":"text","text":"defined as following:"}]},{"type":"codeListing","syntax":null,"code":["struct Options: ParsableArguments {","    @Flag","    var verbose: Bool = false","","    @Argument(parsing: .unconditionalRemaining)","    var words: [String] = []","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parsing the input "},{"type":"codeVoice","code":"--verbose one two --verbose"},{"type":"text","text":" includes the second"},{"type":"text","text":" "},{"type":"codeVoice","code":"--verbose"},{"type":"text","text":" flag in "},{"type":"codeVoice","code":"words"},{"type":"text","text":", resulting in"},{"type":"text","text":" "},{"type":"codeVoice","code":"Options(verbose: true, words: [\"one\", \"two\", \"--verbose\"])"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This parsing strategy can be surprising for users, particularly"},{"type":"text","text":" "},{"type":"text","text":"when combined with options and flags. Prefer "},{"type":"codeVoice","code":"remaining"},{"type":"text","text":" whenever"},{"type":"text","text":" "},{"type":"text","text":"possible, since users can always terminate options and flags with"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator. With the "},{"type":"codeVoice","code":"remaining"},{"type":"text","text":" parsing strategy, the input"},{"type":"text","text":" "},{"type":"codeVoice","code":"--verbose -- one two --verbose"},{"type":"text","text":" would have the same result as the above"},{"type":"text","text":" "},{"type":"text","text":"example: "},{"type":"codeVoice","code":"Options(verbose: true, words: [\"one\", \"two\", \"--verbose\"])"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/unconditionalremaining"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/unconditionalRemaining","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Parse all remaining inputs after parsing any known options or flags,"},{"type":"text","text":" "},{"type":"text","text":"including dash-prefixed inputs and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditionalRemaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"title":"unconditionalRemaining","roleHeading":"Type Property","role":"symbol","symbolKind":"property","externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV22unconditionalRemainingACvpZ","modules":[{"name":"ArgumentParser"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser","doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"references":{"doc://org.swift.ArgumentParser/documentation/ArgumentParser/Argument":{"role":"symbol","title":"Argument","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Argument"}],"abstract":[{"type":"text","text":"A property wrapper that represents a positional command-line argument."}],"identifier":"doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/Argument","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Argument"}],"url":"\/documentation\/argumentparser\/argument"},"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/unconditionalRemaining":{"role":"symbol","title":"unconditionalRemaining","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditionalRemaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"abstract":[{"type":"text","text":"Parse all remaining inputs after parsing any known options or flags,"},{"type":"text","text":" "},{"type":"text","text":"including dash-prefixed inputs and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator."}],"identifier":"doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/unconditionalRemaining","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/unconditionalremaining"},"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"role":"symbol","title":"ArgumentArrayParsingStrategy","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"type":"text","text":" "},{"type":"text","text":"into an array."}],"identifier":"doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy"},"doc://org.swift.ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"}}}