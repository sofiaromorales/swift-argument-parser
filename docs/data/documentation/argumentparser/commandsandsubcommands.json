{
  "abstract" : [
    {
      "text" : "Break complex command-line tools into a tree of subcommands.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser"
      ],
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "ArgumentParser"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Defining Commands and Subcommands"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When command-line programs grow larger, it can be useful to divide them into a group of smaller programs, providing an interface through subcommands. Utilities such as ",
              "type" : "text"
            },
            {
              "code" : "git",
              "type" : "codeVoice"
            },
            {
              "text" : " and the Swift package manager are able to provide varied interfaces for each of their sub-functions by implementing subcommands such as ",
              "type" : "text"
            },
            {
              "code" : "git branch",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "swift package init",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Generally, these subcommands each have their own configuration options, as well as options that are shared across several or all aspects of the larger program.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can build a program with commands and subcommands by defining multiple command types and specifying each command’s subcommands in its configuration. For example, here’s the interface of a ",
              "type" : "text"
            },
            {
              "code" : "math",
              "type" : "codeVoice"
            },
            {
              "text" : " utility that performs operations on a series of values given on the command line.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% math add 10 15 7",
            "32",
            "% math multiply 10 15 7",
            "1050",
            "% math stats average 3 4 13 15 15",
            "10.0",
            "% math stats average --kind median 3 4 13 15 15",
            "13.0",
            "% math stats",
            "OVERVIEW: Calculate descriptive statistics.",
            "",
            "USAGE: math stats <subcommand>",
            "",
            "OPTIONS:",
            "  -h, --help              Show help information.",
            "",
            "SUBCOMMANDS:",
            "  average                 Print the average of the values.",
            "  stdev                   Print the standard deviation of the values.",
            "  quantiles               Print the quantiles of the values (TBD).",
            "",
            "  See 'math help stats <subcommand>' for detailed help."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Start by defining the root ",
              "type" : "text"
            },
            {
              "code" : "Math",
              "type" : "codeVoice"
            },
            {
              "text" : " command. You can provide a static ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/configuration-35km1",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " property for a command that specifies its subcommands and a default subcommand, if any.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Math: ParsableCommand {",
            "    static var configuration = CommandConfiguration(",
            "        abstract: \"A utility for performing maths.\",",
            "        subcommands: [Add.self, Multiply.self, Statistics.self],",
            "        defaultSubcommand: Add.self)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "Math",
              "type" : "codeVoice"
            },
            {
              "text" : " lists its three subcommands by their types; we’ll see the definitions of ",
              "type" : "text"
            },
            {
              "code" : "Add",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Multiply",
              "type" : "codeVoice"
            },
            {
              "text" : ", and ",
              "type" : "text"
            },
            {
              "code" : "Statistics",
              "type" : "codeVoice"
            },
            {
              "text" : " below. ",
              "type" : "text"
            },
            {
              "code" : "Add",
              "type" : "codeVoice"
            },
            {
              "text" : " is also given as a default subcommand — this means that it is selected if a user leaves out a subcommand name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% math 10 15 7",
            "32"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Next, define a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " type with properties that will be shared across multiple subcommands. Types that conform to ",
              "type" : "text"
            },
            {
              "code" : "ParsableArguments",
              "type" : "codeVoice"
            },
            {
              "text" : " can be parsed from command-line arguments, but don’t provide any execution through a ",
              "type" : "text"
            },
            {
              "code" : "run()",
              "type" : "codeVoice"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this case, the ",
              "type" : "text"
            },
            {
              "code" : "Options",
              "type" : "codeVoice"
            },
            {
              "text" : " type accepts a ",
              "type" : "text"
            },
            {
              "code" : "--hexadecimal-output",
              "type" : "codeVoice"
            },
            {
              "text" : " flag and expects a list of integers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Options: ParsableArguments {",
            "    @Flag(name: [.long, .customShort(\"x\")], help: \"Use hexadecimal notation for the result.\")",
            "    var hexadecimalOutput = false",
            "",
            "    @Argument(help: \"A group of integers to operate on.\")",
            "    var values: [Int]",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "It’s time to define our first two subcommands: ",
              "type" : "text"
            },
            {
              "code" : "Add",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Multiply",
              "type" : "codeVoice"
            },
            {
              "text" : ". Both of these subcommands include the arguments defined in the ",
              "type" : "text"
            },
            {
              "code" : "Options",
              "type" : "codeVoice"
            },
            {
              "text" : " type by denoting that property with the ",
              "type" : "text"
            },
            {
              "code" : "@OptionGroup",
              "type" : "codeVoice"
            },
            {
              "text" : " property wrapper (see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/OptionGroup",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : "). ",
              "type" : "text"
            },
            {
              "code" : "@OptionGroup",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t define any new arguments for a command; instead, it splats in the arguments defined by another ",
              "type" : "text"
            },
            {
              "code" : "ParsableArguments",
              "type" : "codeVoice"
            },
            {
              "text" : " type.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension Math {",
            "    struct Add: ParsableCommand {",
            "        static var configuration",
            "            = CommandConfiguration(abstract: \"Print the sum of the values.\")",
            "",
            "        @OptionGroup var options: Math.Options",
            "",
            "        mutating func run() {",
            "            let result = options.values.reduce(0, +)",
            "            print(format(result: result, usingHex: options.hexadecimalOutput))",
            "        }",
            "    }",
            "",
            "    struct Multiply: ParsableCommand {",
            "        static var configuration",
            "            = CommandConfiguration(abstract: \"Print the product of the values.\")",
            "",
            "        @OptionGroup var options: Math.Options",
            "",
            "        mutating func run() {",
            "            let result = options.values.reduce(1, *)",
            "            print(format(result: result, usingHex: options.hexadecimalOutput))",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Next, we’ll define ",
              "type" : "text"
            },
            {
              "code" : "Statistics",
              "type" : "codeVoice"
            },
            {
              "text" : ", the third subcommand of ",
              "type" : "text"
            },
            {
              "code" : "Math",
              "type" : "codeVoice"
            },
            {
              "text" : ". The ",
              "type" : "text"
            },
            {
              "code" : "Statistics",
              "type" : "codeVoice"
            },
            {
              "text" : " command specifies a custom command name (",
              "type" : "text"
            },
            {
              "code" : "stats",
              "type" : "codeVoice"
            },
            {
              "text" : ") in its configuration, overriding the default derived from the type name (",
              "type" : "text"
            },
            {
              "code" : "statistics",
              "type" : "codeVoice"
            },
            {
              "text" : "). It also declares two additional subcommands, meaning that it acts as a forked branch in the command tree, and not a leaf.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension Math {",
            "    struct Statistics: ParsableCommand {",
            "        static var configuration = CommandConfiguration(",
            "            commandName: \"stats\",",
            "            abstract: \"Calculate descriptive statistics.\",",
            "            subcommands: [Average.self, StandardDeviation.self])",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Let’s finish our subcommands with the ",
              "type" : "text"
            },
            {
              "code" : "Average",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "StandardDeviation",
              "type" : "codeVoice"
            },
            {
              "text" : " types. Each of them has slightly different arguments, so they don’t use the ",
              "type" : "text"
            },
            {
              "code" : "Options",
              "type" : "codeVoice"
            },
            {
              "text" : " type defined above. Each subcommand is ultimately independent and can specify a combination of shared and unique arguments.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension Math.Statistics {",
            "    struct Average: ParsableCommand {",
            "        static var configuration = CommandConfiguration(",
            "            abstract: \"Print the average of the values.\")",
            "",
            "        enum Kind: String, ExpressibleByArgument {",
            "            case mean, median, mode",
            "        }",
            "",
            "        @Option(help: \"The kind of average to provide.\")",
            "        var kind: Kind = .mean",
            "",
            "        @Argument(help: \"A group of floating-point values to operate on.\")",
            "        var values: [Double] = []",
            "",
            "        func calculateMean() -> Double { ... }",
            "        func calculateMedian() -> Double { ... }",
            "        func calculateMode() -> [Double] { ... }",
            "",
            "        mutating func run() {",
            "            switch kind {",
            "            case .mean:",
            "                print(calculateMean())",
            "            case .median:",
            "                print(calculateMedian())",
            "            case .mode:",
            "                let result = calculateMode()",
            "                    .map(String.init(describing:))",
            "                    .joined(separator: \" \")",
            "                print(result)",
            "            }",
            "        }",
            "    }",
            "",
            "    struct StandardDeviation: ParsableCommand {",
            "        static var configuration = CommandConfiguration(",
            "            commandName: \"stdev\",",
            "            abstract: \"Print the standard deviation of the values.\")",
            "",
            "        @Argument(help: \"A group of floating-point values to operate on.\")",
            "        var values: [Double] = []",
            "",
            "        mutating func run() {",
            "            if values.isEmpty {",
            "                print(0.0)",
            "            } else {",
            "                let sum = values.reduce(0, +)",
            "                let mean = sum \/ Double(values.count)",
            "                let squaredErrors = values",
            "                    .map { $0 - mean }",
            "                    .map { $0 * $0 }",
            "                let variance = squaredErrors.reduce(0, +) \/ Double(values.count)",
            "                let result = variance.squareRoot()",
            "                print(result)",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Last but not least, we add the ",
              "type" : "text"
            },
            {
              "code" : "@main",
              "type" : "codeVoice"
            },
            {
              "text" : " attribute to the root of our command tree, to tell the compiler to use that as the program’s entry point. Upon execution, this parses the command-line arguments, determines whether a subcommand was selected, and then instantiates and calls the ",
              "type" : "text"
            },
            {
              "code" : "run()",
              "type" : "codeVoice"
            },
            {
              "text" : " method on that particular subcommand.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "@main",
            "struct Math: ParsableCommand {",
            "    \/\/ ...",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "That’s it for this doubly-nested ",
              "type" : "text"
            },
            {
              "code" : "math",
              "type" : "codeVoice"
            },
            {
              "text" : " command! This example is also provided as a part of the ",
              "type" : "text"
            },
            {
              "code" : "swift-argument-parser",
              "type" : "codeVoice"
            },
            {
              "text" : " repository, so you can see it all together and experiment with it ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/apple\/swift-argument-parser\/blob\/main\/Examples\/math\/Math.swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/GettingStarted",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CustomizingCommandHelp"
      ],
      "title" : "Essentials"
    }
  ]
, 
"references": {
"doc://org.swift.ArgumentParser/documentation/ArgumentParser": {
  "abstract" : [
    {
      "text" : "Straightforward, type-safe argument parsing for Swift.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/AsyncParsableCommand": {
  "abstract" : [
    {
      "text" : "A type that can be executed asynchronously, as part of a nested tree of",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "commands.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncParsableCommand"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/asyncparsablecommand"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/CustomizingCommandHelp": {
  "abstract" : [
    {
      "text" : "Define your command’s abstract, extended discussion, or usage string, and set the flags used to invoke the help display.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CustomizingCommandHelp",
  "kind" : "article",
  "role" : "article",
  "title" : "Customizing Help for Commands",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/customizingcommandhelp"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/GettingStarted": {
  "abstract" : [
    {
      "text" : "Learn to set up and customize a simple command-line tool.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/GettingStarted",
  "kind" : "article",
  "role" : "article",
  "title" : "Getting Started with ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/gettingstarted"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/OptionGroup": {
  "abstract" : [
    {
      "text" : "A wrapper that transparently includes a parsable type.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "OptionGroup"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/OptionGroup",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "OptionGroup"
    }
  ],
  "role" : "symbol",
  "title" : "OptionGroup",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/optiongroup"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableArguments": {
  "abstract" : [
    {
      "text" : "A type that can be parsed from a program’s command-line arguments.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableArguments"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableArguments"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableArguments",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablearguments"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableCommand": {
  "abstract" : [
    {
      "text" : "A type that can be executed as part of a nested tree of commands.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableCommand/configuration-35km1": {
  "abstract" : [
    {
      "text" : "Configuration for this command, including subcommands and custom help",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "text.",
      "type" : "text"
    }
  ],
  "defaultImplementations" : 1,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "configuration"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:14ArgumentParser20CommandConfigurationV",
      "text" : "CommandConfiguration"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/configuration-35km1",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "configuration",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand\/configuration-35km1"
},
"https://github.com/apple/swift-argument-parser/blob/main/Examples/math/Math.swift": {
  "identifier" : "https:\/\/github.com\/apple\/swift-argument-parser\/blob\/main\/Examples\/math\/Math.swift",
  "title" : "here",
  "titleInlineContent" : [
    {
      "text" : "here",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/apple\/swift-argument-parser\/blob\/main\/Examples\/math\/Math.swift"
}
}
}