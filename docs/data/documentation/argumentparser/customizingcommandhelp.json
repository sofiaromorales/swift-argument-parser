{
  "abstract" : [
    {
      "text" : "Define your command’s abstract, extended discussion, or usage string, and set the flags used to invoke the help display.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser"
      ],
      [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CustomizingCommandHelp"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "ArgumentParser"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Customizing Help for Commands"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to configuring the command name and subcommands, as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", you can also configure a command’s help text by providing an abstract, discussion, or custom usage string.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Repeat: ParsableCommand {",
            "    static var configuration = CommandConfiguration(",
            "        abstract: \"Repeats your input phrase.\",",
            "        usage: \"\"\"",
            "            repeat <phrase>",
            "            repeat --count <count> <phrase>",
            "            \"\"\",",
            "        discussion: \"\"\"",
            "            Prints to stdout forever, or until you halt the program.",
            "            \"\"\")",
            "",
            "    @Argument(help: \"The phrase to repeat.\")",
            "    var phrase: String",
            "",
            "    @Option(help: \"How many times to repeat.\")",
            "    var count: Int?",
            "",
            "    mutating func run() throws {",
            "        for _ in 0..<(count ?? 2) {",
            "            print(phrase) ",
            "        }",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The customized components now appear in the generated help screen:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% repeat --help",
            "OVERVIEW: Repeats your input phrase.",
            "",
            "Prints to stdout forever, or until you halt the program.",
            "",
            "USAGE: repeat <phrase>",
            "       repeat --count <count> <phrase>",
            "",
            "ARGUMENTS:",
            "  <phrase>                The phrase to repeat.",
            "",
            "OPTIONS:",
            "  -h, --help              Show help information.",
            "",
            "% repeat hello!",
            "hello!",
            "hello!",
            "hello!",
            "hello!",
            "hello!",
            "hello!",
            "..."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Modifying-the-Help-Flag-Names",
          "level" : 2,
          "text" : "Modifying the Help Flag Names",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Users can see the help screen for a command by passing either the ",
              "type" : "text"
            },
            {
              "code" : "-h",
              "type" : "codeVoice"
            },
            {
              "text" : " or the ",
              "type" : "text"
            },
            {
              "code" : "--help",
              "type" : "codeVoice"
            },
            {
              "text" : " flag, by default. If you need to use one of those flags for another purpose, you can provide alternative names when configuring a root command.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Example: ParsableCommand {",
            "    static let configuration = CommandConfiguration(",
            "        helpNames: [.long, .customShort(\"?\")])",
            "",
            "    @Option(name: .shortAndLong, help: \"The number of history entries to show.\")",
            "    var historyDepth: Int",
            "",
            "    mutating func run() throws {",
            "        printHistory(depth: historyDepth)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When running the command, ",
              "type" : "text"
            },
            {
              "code" : "-h",
              "type" : "codeVoice"
            },
            {
              "text" : " matches the short name of the ",
              "type" : "text"
            },
            {
              "code" : "historyDepth",
              "type" : "codeVoice"
            },
            {
              "text" : " property, and ",
              "type" : "text"
            },
            {
              "code" : "-?",
              "type" : "codeVoice"
            },
            {
              "text" : " displays the help screen.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% example -h 3",
            "nmap -v -sS -O 10.2.2.2",
            "sshnuke 10.2.2.2 -rootpw=\"Z1ON0101\"",
            "ssh 10.2.2.2 -l root",
            "% example -?",
            "USAGE: example --history-depth <history-depth>",
            "",
            "ARGUMENTS:",
            "  <phrase>                The phrase to repeat.",
            "",
            "OPTIONS:",
            "  -h, --history-depth     The number of history entries to show.",
            "  -?, --help              Show help information."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When not overridden, custom help names are inherited by subcommands. In this example, the parent command defines ",
              "type" : "text"
            },
            {
              "code" : "--help",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "-?",
              "type" : "codeVoice"
            },
            {
              "text" : " as its help names:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Parent: ParsableCommand {",
            "    static let configuration = CommandConfiguration(",
            "        subcommands: [Child.self],",
            "        helpNames: [.long, .customShort(\"?\")])",
            "",
            "    struct Child: ParsableCommand {",
            "        @Option(name: .shortAndLong, help: \"The host the server will run on.\")",
            "        var host: String",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "child",
              "type" : "codeVoice"
            },
            {
              "text" : " subcommand inherits the parent’s help names, allowing the user to distinguish between the host argument (",
              "type" : "text"
            },
            {
              "code" : "-h",
              "type" : "codeVoice"
            },
            {
              "text" : ") and help (",
              "type" : "text"
            },
            {
              "code" : "-?",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% parent child -h 192.0.0.0",
            "...",
            "% parent child -?",
            "USAGE: parent child --host <host>",
            "",
            "OPTIONS:",
            "  -h, --host <host>       The host the server will run on.",
            "  -?, --help              Show help information."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Hiding-Commands",
          "level" : 2,
          "text" : "Hiding Commands",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You may not want to show every one of your command as part of your command-line interface. To render a command invisible (but still usable), pass ",
              "type" : "text"
            },
            {
              "code" : "shouldDisplay: false",
              "type" : "codeVoice"
            },
            {
              "text" : " to the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandConfiguration",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " initializer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Generating-Help-Text-Programmatically",
          "level" : 2,
          "text" : "Generating Help Text Programmatically",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The help screen is automatically shown to users when they call your command with the help flag. You can generate the same text from within your program by calling the ",
              "type" : "text"
            },
            {
              "code" : "helpMessage()",
              "type" : "codeVoice"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let help = Repeat.helpMessage()",
            "\/\/ `help` matches the output above",
            "",
            "let fortyColumnHelp = Repeat.helpMessage(columns: 40)",
            "\/\/ `fortyColumnHelp` is the same help screen, but wrapped to 40 columns"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When generating help text for a subcommand, call ",
              "type" : "text"
            },
            {
              "code" : "helpMessage(for:)",
              "type" : "codeVoice"
            },
            {
              "text" : " on the ",
              "type" : "text"
            },
            {
              "code" : "ParsableCommand",
              "type" : "codeVoice"
            },
            {
              "text" : " type that represents the root of the command tree and pass the subcommand type as a parameter to ensure the correct display.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/GettingStarted",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand",
        "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands"
      ],
      "title" : "Essentials"
    }
  ]
, 
"references": {
"doc://org.swift.ArgumentParser/documentation/ArgumentParser": {
  "abstract" : [
    {
      "text" : "Straightforward, type-safe argument parsing for Swift.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/AsyncParsableCommand": {
  "abstract" : [
    {
      "text" : "A type that can be executed asynchronously, as part of a nested tree of",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "commands.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncParsableCommand"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/AsyncParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/asyncparsablecommand"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/CommandConfiguration": {
  "abstract" : [
    {
      "text" : "The configuration for a command.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "CommandConfiguration"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandConfiguration",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "CommandConfiguration"
    }
  ],
  "role" : "symbol",
  "title" : "CommandConfiguration",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/commandconfiguration"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/CommandsAndSubcommands": {
  "abstract" : [
    {
      "text" : "Break complex command-line tools into a tree of subcommands.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands",
  "kind" : "article",
  "role" : "article",
  "title" : "Defining Commands and Subcommands",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/commandsandsubcommands"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/GettingStarted": {
  "abstract" : [
    {
      "text" : "Learn to set up and customize a simple command-line tool.",
      "type" : "text"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/GettingStarted",
  "kind" : "article",
  "role" : "article",
  "title" : "Getting Started with ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/gettingstarted"
},
"doc://org.swift.ArgumentParser/documentation/ArgumentParser/ParsableCommand": {
  "abstract" : [
    {
      "text" : "A type that can be executed as part of a nested tree of commands.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "graphRepresentation" : "",
  "identifier" : "doc:\/\/org.swift.ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand"
}
}
}